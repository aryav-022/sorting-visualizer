import { useRef, forwardRef, useEffect } from "react";

const Graph = forwardRef(({ arr, gridOn }, { barsRef, formatRef }) => {
	const gridRef = useRef(null);
	
    // This useEffect is used to update the graph when the array changes
    useEffect(() => {
		const bars = barsRef.current.children;

		// Assuming format is Array, update grid
		gridRef.current.style.backgroundSize = `4rem 4rem`;
		

		// If the format is Array, then we don't need to do any calculations		
		if (formatRef.current.value === "Array") return;
		
		const maximum = Math.max(...arr);
		const minimum = Math.min(...arr);
		
		let factor = 384;
		let baseShift = 192;
		
		if (minimum < 0 && maximum > 0) {
			factor /= maximum - minimum;
			baseShift += minimum * factor;
		} else if (maximum > 0) {
			factor /= maximum;
		} else {
			factor /= Math.abs(minimum);
			baseShift -= 384;
		}

		for (let i = 0; i < bars.length; i++) {
			bars[i].style.height = `${Math.abs(arr[i] * factor)}px`; // Use the rendering dom to set the height of the bar
			bars[i].style.translate = `0 calc(${arr[i] < 0 ? "" : "-"}50% + ${baseShift}px)`; // Use the rendering dom to set the translate of the bar
			bars[i].classList.add(arr[i] < 0 ? "rounded-b" : "rounded-t"); // Use the rendering dom to set the border radius of the bar
		}

		// Update the grid
		gridRef.current.style.backgroundSize = `4rem ${Math.max(16, factor)}px`;
	}, [arr, barsRef, formatRef]);

	useEffect(() => {
		if (gridOn) {
			gridRef.current.classList.remove("hidden");
		} else {
			gridRef.current.classList.add("hidden");
		}
	}, [gridOn]);

	return (
		<div className={`flex justify-center items-center max-sm:scale-50`}>
			<div className={`relative flex justify-center items-center p-8 bg-white rounded-lg text-black`}>
				<div className="flex absolute left-8 top-8 h-96 w-[calc(100%-4rem)] overflow-hidden gap-0 flex-wrap border border-black border-opacity-10 grid-background" ref={gridRef}></div>
				<div className="flex h-96 items-center" ref={barsRef}>
					{/* Generated by React */}
					{arr.length === 0 ? (
						<div
							id="bar"
							className="w-16 border border-black flex z-10 items-center justify-center text-md font-light transition-all duration-[2s]"
						>
							Canvas
						</div>
					) : (
						arr.map((element, index) => (
							<div
								id="bar"
								key={index}
								className="w-16 border border-black bg-blue-400 flex items-center justify-center text-md font-light transition-all duration-[2s]"
							>
								{element}
							</div>
						))
					)}
				</div>
			</div>
		</div>
	);
})

Graph.displayName = "Graph";

export default Graph;